//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export interface IAppControllerClient {

    /**
     * Get health information about the API
     * @return Health data information about the API
     */
    getHealth(): Promise<HealthData>;

    /**
     * Return a 500 error for testing
     */
    internalError(): Promise<void>;
}

export class AppControllerClient implements IAppControllerClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get health information about the API
     * @return Health data information about the API
     */
    getHealth(): Promise<HealthData> {
        let url_ = this.baseUrl + "/health";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetHealth(_response);
        });
    }

    protected processGetHealth(response: Response): Promise<HealthData> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = HealthData.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<HealthData>(null as any);
    }

    /**
     * Return a 500 error for testing
     */
    internalError(): Promise<void> {
        let url_ = this.baseUrl + "/internalError";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInternalError(_response);
        });
    }

    protected processInternalError(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = HttpProblemResponse.fromJS(resultData500);
            return throwException("An internal error formatted as a problem", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export interface IAuthControllerClient {

    /**
     * Get the current users active session
     * @param refresh (optional) 
     * @return The live session
     */
    getSession(refresh?: Refresh | undefined): Promise<UserSession>;

    /**
     * Log a user in
     */
    login(body: LoginRequest): Promise<UserSession>;

    /**
     * Log the user out
     * @return The user has been logged out
     */
    logout(): Promise<void>;

    /**
     * List all users
     */
    getUsers(): Promise<User[]>;

    /**
     * Create a new user
     * @return The new user
     */
    createUser(body: NewUser): Promise<User>;

    /**
     * Delete a user
     */
    deleteUser(userId: string): Promise<void>;
}

export class AuthControllerClient implements IAuthControllerClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get the current users active session
     * @param refresh (optional) 
     * @return The live session
     */
    getSession(refresh?: Refresh | undefined): Promise<UserSession> {
        let url_ = this.baseUrl + "/auth/session?";
        if (refresh === null)
            throw new Error("The parameter 'refresh' cannot be null.");
        else if (refresh !== undefined)
            url_ += "refresh=" + encodeURIComponent("" + refresh) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSession(_response);
        });
    }

    protected processGetSession(response: Response): Promise<UserSession> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserSession.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = BadRequestHttpProblem.fromJS(resultData400);
            return throwException("An HttpProblem response used when the request is malformed.", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = HttpProblemResponse.fromJS(resultData404);
            return throwException("The user has no active session", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserSession>(null as any);
    }

    /**
     * Log a user in
     */
    login(body: LoginRequest): Promise<UserSession> {
        let url_ = this.baseUrl + "/auth/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: Response): Promise<UserSession> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserSession.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = BadRequestHttpProblem.fromJS(resultData400);
            return throwException("An HttpProblem response used when the request is malformed.", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = HttpProblemResponse.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserSession>(null as any);
    }

    /**
     * Log the user out
     * @return The user has been logged out
     */
    logout(): Promise<void> {
        let url_ = this.baseUrl + "/auth/logout";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogout(_response);
        });
    }

    protected processLogout(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = BadRequestHttpProblem.fromJS(resultData400);
            return throwException("An HttpProblem response used when the request is malformed.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * List all users
     */
    getUsers(): Promise<User[]> {
        let url_ = this.baseUrl + "/users";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUsers(_response);
        });
    }

    protected processGetUsers(response: Response): Promise<User[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(User.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = BadRequestHttpProblem.fromJS(resultData400);
            return throwException("An HttpProblem response used when the request is malformed.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<User[]>(null as any);
    }

    /**
     * Create a new user
     * @return The new user
     */
    createUser(body: NewUser): Promise<User> {
        let url_ = this.baseUrl + "/users";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateUser(_response);
        });
    }

    protected processCreateUser(response: Response): Promise<User> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = User.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = BadRequestHttpProblem.fromJS(resultData400);
            return throwException("An HttpProblem response used when the request is malformed.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<User>(null as any);
    }

    /**
     * Delete a user
     */
    deleteUser(userId: string): Promise<void> {
        let url_ = this.baseUrl + "/users/{userId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteUser(_response);
        });
    }

    protected processDeleteUser(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = BadRequestHttpProblem.fromJS(resultData400);
            return throwException("An HttpProblem response used when the request is malformed.", status, _responseText, _headers, result400);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = HttpProblemResponse.fromJS(resultData403);
            return throwException("This user cannot be deleted. See response for details.", status, _responseText, _headers, result403);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = HttpProblemResponse.fromJS(resultData404);
            return throwException("No user with the provided ID existed.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export interface IProductsControllerClient {

    /**
     * Get all products
     * @param query (optional) A short text to search for in either the title, description or category.
     * @param category (optional) 
     * @param count (optional) 
     * @param offset (optional) 
     * @param sortBy (optional) 
     * @param sortDirection (optional) 
     */
    listAll(query?: string | undefined, category?: Category | undefined, count?: number | undefined, offset?: number | null | undefined, sortBy?: SortBy | undefined, sortDirection?: SortDirection | undefined): Promise<GetProductsResult>;

    /**
     * Create a new product
     * @return The newly created product
     */
    createProduct(body: NewProduct): Promise<Product>;

    /**
     * Get information about a product
     */
    getProduct(productId: string): Promise<Product>;

    /**
     * Update an existing product
     * @return The updated product
     */
    updateProduct(productId: string, body: UpdateProduct): Promise<Product>;
}

export class ProductsControllerClient implements IProductsControllerClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all products
     * @param query (optional) A short text to search for in either the title, description or category.
     * @param category (optional) 
     * @param count (optional) 
     * @param offset (optional) 
     * @param sortBy (optional) 
     * @param sortDirection (optional) 
     */
    listAll(query?: string | undefined, category?: Category | undefined, count?: number | undefined, offset?: number | null | undefined, sortBy?: SortBy | undefined, sortDirection?: SortDirection | undefined): Promise<GetProductsResult> {
        let url_ = this.baseUrl + "/products?";
        if (query === null)
            throw new Error("The parameter 'query' cannot be null.");
        else if (query !== undefined)
            url_ += "query=" + encodeURIComponent("" + query) + "&";
        if (category === null)
            throw new Error("The parameter 'category' cannot be null.");
        else if (category !== undefined)
            url_ += "category=" + encodeURIComponent("" + category) + "&";
        if (count === null)
            throw new Error("The parameter 'count' cannot be null.");
        else if (count !== undefined)
            url_ += "count=" + encodeURIComponent("" + count) + "&";
        if (offset !== undefined && offset !== null)
            url_ += "offset=" + encodeURIComponent("" + offset) + "&";
        if (sortBy === null)
            throw new Error("The parameter 'sortBy' cannot be null.");
        else if (sortBy !== undefined)
            url_ += "sortBy=" + encodeURIComponent("" + sortBy) + "&";
        if (sortDirection === null)
            throw new Error("The parameter 'sortDirection' cannot be null.");
        else if (sortDirection !== undefined)
            url_ += "sortDirection=" + encodeURIComponent("" + sortDirection) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processListAll(_response);
        });
    }

    protected processListAll(response: Response): Promise<GetProductsResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetProductsResult.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = BadRequestHttpProblem.fromJS(resultData400);
            return throwException("An HttpProblem response used when the request is malformed.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetProductsResult>(null as any);
    }

    /**
     * Create a new product
     * @return The newly created product
     */
    createProduct(body: NewProduct): Promise<Product> {
        let url_ = this.baseUrl + "/products";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateProduct(_response);
        });
    }

    protected processCreateProduct(response: Response): Promise<Product> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Product.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = BadRequestHttpProblem.fromJS(resultData400);
            return throwException("An HttpProblem response used when the request is malformed.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Product>(null as any);
    }

    /**
     * Get information about a product
     */
    getProduct(productId: string): Promise<Product> {
        let url_ = this.baseUrl + "/products/{productId}";
        if (productId === undefined || productId === null)
            throw new Error("The parameter 'productId' must be defined.");
        url_ = url_.replace("{productId}", encodeURIComponent("" + productId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetProduct(_response);
        });
    }

    protected processGetProduct(response: Response): Promise<Product> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Product.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = BadRequestHttpProblem.fromJS(resultData400);
            return throwException("An HttpProblem response used when the request is malformed.", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = HttpProblemResponse.fromJS(resultData404);
            return throwException("No such product exists", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Product>(null as any);
    }

    /**
     * Update an existing product
     * @return The updated product
     */
    updateProduct(productId: string, body: UpdateProduct): Promise<Product> {
        let url_ = this.baseUrl + "/products/{productId}";
        if (productId === undefined || productId === null)
            throw new Error("The parameter 'productId' must be defined.");
        url_ = url_.replace("{productId}", encodeURIComponent("" + productId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateProduct(_response);
        });
    }

    protected processUpdateProduct(response: Response): Promise<Product> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Product.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = BadRequestHttpProblem.fromJS(resultData400);
            return throwException("An HttpProblem response used when the request is malformed.", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = HttpProblemResponse.fromJS(resultData404);
            return throwException("No product with the provided ID exists", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Product>(null as any);
    }
}

export interface IWarehouseControllerClient {

    /**
     * Get the inventory count for a product
     * @return The result of the inventory
     */
    getInventory(productId: string): Promise<InventoryResult>;

    /**
     * Set the new inventory count for a product
     * @return The new inventory count
     */
    updateInventory(productId: string, body: number): Promise<InventoryResult>;
}

export class WarehouseControllerClient implements IWarehouseControllerClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get the inventory count for a product
     * @return The result of the inventory
     */
    getInventory(productId: string): Promise<InventoryResult> {
        let url_ = this.baseUrl + "/warehouse/inventory/{productId}";
        if (productId === undefined || productId === null)
            throw new Error("The parameter 'productId' must be defined.");
        url_ = url_.replace("{productId}", encodeURIComponent("" + productId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetInventory(_response);
        });
    }

    protected processGetInventory(response: Response): Promise<InventoryResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InventoryResult.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = BadRequestHttpProblem.fromJS(resultData400);
            return throwException("An HttpProblem response used when the request is malformed.", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = HttpProblemResponse.fromJS(resultData404);
            return throwException("No inventory for the specified product", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<InventoryResult>(null as any);
    }

    /**
     * Set the new inventory count for a product
     * @return The new inventory count
     */
    updateInventory(productId: string, body: number): Promise<InventoryResult> {
        let url_ = this.baseUrl + "/warehouse/inventory/{productId}";
        if (productId === undefined || productId === null)
            throw new Error("The parameter 'productId' must be defined.");
        url_ = url_.replace("{productId}", encodeURIComponent("" + productId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateInventory(_response);
        });
    }

    protected processUpdateInventory(response: Response): Promise<InventoryResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InventoryResult.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = BadRequestHttpProblem.fromJS(resultData400);
            return throwException("An HttpProblem response used when the request is malformed.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<InventoryResult>(null as any);
    }
}

/** Health data information about the API */
export class HealthData implements IHealthData {
    ok?: boolean;
    /** Date and time of boot in ISO format. */
    bootTime!: string;
    /** Runtime duration in ISO format. */
    upTime!: string;

    [key: string]: any;

    constructor(data?: IHealthData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.ok = true;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.ok = _data["ok"] !== undefined ? _data["ok"] : true;
            this.bootTime = _data["bootTime"];
            this.upTime = _data["upTime"];
        }
    }

    static fromJS(data: any): HealthData {
        data = typeof data === 'object' ? data : {};
        let result = new HealthData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["ok"] = this.ok;
        data["bootTime"] = this.bootTime;
        data["upTime"] = this.upTime;
        return data;
    }
}

/** Health data information about the API */
export interface IHealthData {
    ok?: boolean;
    /** Date and time of boot in ISO format. */
    bootTime: string;
    /** Runtime duration in ISO format. */
    upTime: string;

    [key: string]: any;
}

export class HttpProblemResponse implements IHttpProblemResponse {
    type!: string;
    status!: number;
    title?: string;
    detail?: string;
    instance?: string;
    stack?: string[];

    [key: string]: any;

    constructor(data?: IHttpProblemResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.status = _data["status"];
            this.title = _data["title"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
            if (Array.isArray(_data["stack"])) {
                this.stack = [] as any;
                for (let item of _data["stack"])
                    this.stack!.push(item);
            }
        }
    }

    static fromJS(data: any): HttpProblemResponse {
        data = typeof data === 'object' ? data : {};
        let result = new HttpProblemResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["status"] = this.status;
        data["title"] = this.title;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        if (Array.isArray(this.stack)) {
            data["stack"] = [];
            for (let item of this.stack)
                data["stack"].push(item);
        }
        return data;
    }
}

export interface IHttpProblemResponse {
    type: string;
    status: number;
    title?: string;
    detail?: string;
    instance?: string;
    stack?: string[];

    [key: string]: any;
}

/** An HttpProblem response used when the request is malformed. */
export class BadRequestHttpProblem implements IBadRequestHttpProblem {
    type!: string;
    status!: number;
    title?: string;
    detail?: string;
    instance?: string;
    stack?: string[];
    /** Contains details about why the request is bad. Format is not well-known. */
    errors?: any | undefined;

    [key: string]: any;

    constructor(data?: IBadRequestHttpProblem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.status = _data["status"];
            this.title = _data["title"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
            if (Array.isArray(_data["stack"])) {
                this.stack = [] as any;
                for (let item of _data["stack"])
                    this.stack!.push(item);
            }
            this.errors = _data["errors"];
        }
    }

    static fromJS(data: any): BadRequestHttpProblem {
        data = typeof data === 'object' ? data : {};
        let result = new BadRequestHttpProblem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["status"] = this.status;
        data["title"] = this.title;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        if (Array.isArray(this.stack)) {
            data["stack"] = [];
            for (let item of this.stack)
                data["stack"].push(item);
        }
        data["errors"] = this.errors;
        return data;
    }
}

/** An HttpProblem response used when the request is malformed. */
export interface IBadRequestHttpProblem {
    type: string;
    status: number;
    title?: string;
    detail?: string;
    instance?: string;
    stack?: string[];
    /** Contains details about why the request is bad. Format is not well-known. */
    errors?: any | undefined;

    [key: string]: any;
}

export class UserSession implements IUserSession {
    session!: Session;
    user!: User2;

    [key: string]: any;

    constructor(data?: IUserSession) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.session = new Session();
            this.user = new User2();
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.session = _data["session"] ? Session.fromJS(_data["session"]) : new Session();
            this.user = _data["user"] ? User2.fromJS(_data["user"]) : new User2();
        }
    }

    static fromJS(data: any): UserSession {
        data = typeof data === 'object' ? data : {};
        let result = new UserSession();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["session"] = this.session ? this.session.toJSON() : <any>undefined;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUserSession {
    session: Session;
    user: User2;

    [key: string]: any;
}

export class LoginRequest implements ILoginRequest {
    username!: string;
    password!: string;

    [key: string]: any;

    constructor(data?: ILoginRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.username = _data["username"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginRequest {
        data = typeof data === 'object' ? data : {};
        let result = new LoginRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["username"] = this.username;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginRequest {
    username: string;
    password: string;

    [key: string]: any;
}

export class User implements IUser {
    /** A unique ID for this user */
    id!: string;
    /** The role of the user */
    role!: UserRole;
    /** Display name for the user that may differ from the username. Does not have to be unique. */
    displayName?: string;
    /** The username of the user (must be unique) */
    username!: string;
    /** The users password */
    password!: string;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.role = _data["role"];
            this.displayName = _data["displayName"];
            this.username = _data["username"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["role"] = this.role;
        data["displayName"] = this.displayName;
        data["username"] = this.username;
        data["password"] = this.password;
        return data;
    }
}

export interface IUser {
    /** A unique ID for this user */
    id: string;
    /** The role of the user */
    role: UserRole;
    /** Display name for the user that may differ from the username. Does not have to be unique. */
    displayName?: string;
    /** The username of the user (must be unique) */
    username: string;
    /** The users password */
    password: string;
}

/** The new user to create. */
export class NewUser implements INewUser {
    /** The role of the user */
    role!: NewUserRole;
    /** Display name for the user that may differ from the username. Does not have to be unique. */
    displayName?: string;
    /** The username of the user (must be unique) */
    username!: string;
    /** The users password */
    password!: string;

    constructor(data?: INewUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.role = _data["role"];
            this.displayName = _data["displayName"];
            this.username = _data["username"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): NewUser {
        data = typeof data === 'object' ? data : {};
        let result = new NewUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["role"] = this.role;
        data["displayName"] = this.displayName;
        data["username"] = this.username;
        data["password"] = this.password;
        return data;
    }
}

/** The new user to create. */
export interface INewUser {
    /** The role of the user */
    role: NewUserRole;
    /** Display name for the user that may differ from the username. Does not have to be unique. */
    displayName?: string;
    /** The username of the user (must be unique) */
    username: string;
    /** The users password */
    password: string;
}

export class GetProductsResult implements IGetProductsResult {
    results!: Results[];
    /** The total number of results regardless of paging */
    totalResults!: number;
    /** The total number of pages with the provided count */
    pageCount!: number;
    /** The number of items per page */
    countPerPage?: number;

    [key: string]: any;

    constructor(data?: IGetProductsResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.results = [];
            this.countPerPage = 10;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results.fromJS(item));
            }
            this.totalResults = _data["totalResults"];
            this.pageCount = _data["pageCount"];
            this.countPerPage = _data["countPerPage"] !== undefined ? _data["countPerPage"] : 10;
        }
    }

    static fromJS(data: any): GetProductsResult {
        data = typeof data === 'object' ? data : {};
        let result = new GetProductsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["totalResults"] = this.totalResults;
        data["pageCount"] = this.pageCount;
        data["countPerPage"] = this.countPerPage;
        return data;
    }
}

export interface IGetProductsResult {
    results: Results[];
    /** The total number of results regardless of paging */
    totalResults: number;
    /** The total number of pages with the provided count */
    pageCount: number;
    /** The number of items per page */
    countPerPage?: number;

    [key: string]: any;
}

export class Product implements IProduct {
    /** The unique ID for the product (format not guaranteed) */
    id!: string;
    title!: string;
    /** The current price of the product in NOK */
    price!: number;
    /** A short description of the product */
    description?: string;
    category!: ProductCategory;
    /** The rating of this product from 1 (worst) to 5 (best). */
    rating?: number;
    /** The number of people that have rated this product. */
    nrOfRatings?: number;

    [key: string]: any;

    constructor(data?: IProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.nrOfRatings = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.title = _data["title"];
            this.price = _data["price"];
            this.description = _data["description"];
            this.category = _data["category"];
            this.rating = _data["rating"];
            this.nrOfRatings = _data["nrOfRatings"] !== undefined ? _data["nrOfRatings"] : 0;
        }
    }

    static fromJS(data: any): Product {
        data = typeof data === 'object' ? data : {};
        let result = new Product();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["title"] = this.title;
        data["price"] = this.price;
        data["description"] = this.description;
        data["category"] = this.category;
        data["rating"] = this.rating;
        data["nrOfRatings"] = this.nrOfRatings;
        return data;
    }
}

export interface IProduct {
    /** The unique ID for the product (format not guaranteed) */
    id: string;
    title: string;
    /** The current price of the product in NOK */
    price: number;
    /** A short description of the product */
    description?: string;
    category: ProductCategory;
    /** The rating of this product from 1 (worst) to 5 (best). */
    rating?: number;
    /** The number of people that have rated this product. */
    nrOfRatings?: number;

    [key: string]: any;
}

/** A new product that will be added and assigned an id. */
export class NewProduct implements INewProduct {
    title!: string;
    /** The current price of the product in NOK */
    price!: number;
    /** A short description of the product */
    description?: string;
    category!: NewProductCategory;

    [key: string]: any;

    constructor(data?: INewProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.title = _data["title"];
            this.price = _data["price"];
            this.description = _data["description"];
            this.category = _data["category"];
        }
    }

    static fromJS(data: any): NewProduct {
        data = typeof data === 'object' ? data : {};
        let result = new NewProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["title"] = this.title;
        data["price"] = this.price;
        data["description"] = this.description;
        data["category"] = this.category;
        return data;
    }
}

/** A new product that will be added and assigned an id. */
export interface INewProduct {
    title: string;
    /** The current price of the product in NOK */
    price: number;
    /** A short description of the product */
    description?: string;
    category: NewProductCategory;

    [key: string]: any;
}

/** The properties of an existing product to update */
export class UpdateProduct implements IUpdateProduct {
    title?: string;
    /** The current price of the product in NOK */
    price?: number;
    /** A short description of the product */
    description?: string;
    category?: UpdateProductCategory;
    /** The rating of this product from 1 (worst) to 5 (best). */
    rating?: number;
    /** The number of people that have rated this product. */
    nrOfRatings?: number;

    [key: string]: any;

    constructor(data?: IUpdateProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.nrOfRatings = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.title = _data["title"];
            this.price = _data["price"];
            this.description = _data["description"];
            this.category = _data["category"];
            this.rating = _data["rating"];
            this.nrOfRatings = _data["nrOfRatings"] !== undefined ? _data["nrOfRatings"] : 0;
        }
    }

    static fromJS(data: any): UpdateProduct {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["title"] = this.title;
        data["price"] = this.price;
        data["description"] = this.description;
        data["category"] = this.category;
        data["rating"] = this.rating;
        data["nrOfRatings"] = this.nrOfRatings;
        return data;
    }
}

/** The properties of an existing product to update */
export interface IUpdateProduct {
    title?: string;
    /** The current price of the product in NOK */
    price?: number;
    /** A short description of the product */
    description?: string;
    category?: UpdateProductCategory;
    /** The rating of this product from 1 (worst) to 5 (best). */
    rating?: number;
    /** The number of people that have rated this product. */
    nrOfRatings?: number;

    [key: string]: any;
}

export class InventoryResult implements IInventoryResult {
    productId!: string;
    count!: number;

    [key: string]: any;

    constructor(data?: IInventoryResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.productId = _data["productId"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): InventoryResult {
        data = typeof data === 'object' ? data : {};
        let result = new InventoryResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["productId"] = this.productId;
        data["count"] = this.count;
        return data;
    }
}

export interface IInventoryResult {
    productId: string;
    count: number;

    [key: string]: any;
}

export type Refresh = "true" | "false";

export type Category = "electronics" | "clothing" | "home decor" | "beauty" | "sports";

export type SortBy = "id" | "title" | "price" | "rating" | "nrOfRatings";

export type SortDirection = "asc" | "desc";

export class Session implements ISession {
    /** The id of the user */
    userId!: string;
    /** The users token */
    token!: string;
    /** Timestamp for when the session was started. */
    createdAt!: number;
    /** Timestamp when the token expires. */
    expiresAt!: number;

    [key: string]: any;

    constructor(data?: ISession) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.userId = _data["userId"];
            this.token = _data["token"];
            this.createdAt = _data["createdAt"];
            this.expiresAt = _data["expiresAt"];
        }
    }

    static fromJS(data: any): Session {
        data = typeof data === 'object' ? data : {};
        let result = new Session();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["userId"] = this.userId;
        data["token"] = this.token;
        data["createdAt"] = this.createdAt;
        data["expiresAt"] = this.expiresAt;
        return data;
    }
}

export interface ISession {
    /** The id of the user */
    userId: string;
    /** The users token */
    token: string;
    /** Timestamp for when the session was started. */
    createdAt: number;
    /** Timestamp when the token expires. */
    expiresAt: number;

    [key: string]: any;
}

export class User2 implements IUser2 {
    /** A unique ID for this user */
    id!: string;
    /** The role of the user */
    role!: User2Role;
    /** Display name for the user that may differ from the username. Does not have to be unique. */
    displayName?: string;
    /** The username of the user (must be unique) */
    username!: string;

    constructor(data?: IUser2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.role = _data["role"];
            this.displayName = _data["displayName"];
            this.username = _data["username"];
        }
    }

    static fromJS(data: any): User2 {
        data = typeof data === 'object' ? data : {};
        let result = new User2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["role"] = this.role;
        data["displayName"] = this.displayName;
        data["username"] = this.username;
        return data;
    }
}

export interface IUser2 {
    /** A unique ID for this user */
    id: string;
    /** The role of the user */
    role: User2Role;
    /** Display name for the user that may differ from the username. Does not have to be unique. */
    displayName?: string;
    /** The username of the user (must be unique) */
    username: string;
}

export type UserRole = "admin" | "productAdmin" | "warehouseAdmin";

export type NewUserRole = "admin" | "productAdmin" | "warehouseAdmin";

export class Results implements IResults {
    /** The unique ID for the product (format not guaranteed) */
    id!: string;
    title!: string;
    /** The current price of the product in NOK */
    price!: number;
    /** A short description of the product */
    description?: string;
    category!: ResultsCategory;
    /** The rating of this product from 1 (worst) to 5 (best). */
    rating?: number;
    /** The number of people that have rated this product. */
    nrOfRatings?: number;

    [key: string]: any;

    constructor(data?: IResults) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.nrOfRatings = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.title = _data["title"];
            this.price = _data["price"];
            this.description = _data["description"];
            this.category = _data["category"];
            this.rating = _data["rating"];
            this.nrOfRatings = _data["nrOfRatings"] !== undefined ? _data["nrOfRatings"] : 0;
        }
    }

    static fromJS(data: any): Results {
        data = typeof data === 'object' ? data : {};
        let result = new Results();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["title"] = this.title;
        data["price"] = this.price;
        data["description"] = this.description;
        data["category"] = this.category;
        data["rating"] = this.rating;
        data["nrOfRatings"] = this.nrOfRatings;
        return data;
    }
}

export interface IResults {
    /** The unique ID for the product (format not guaranteed) */
    id: string;
    title: string;
    /** The current price of the product in NOK */
    price: number;
    /** A short description of the product */
    description?: string;
    category: ResultsCategory;
    /** The rating of this product from 1 (worst) to 5 (best). */
    rating?: number;
    /** The number of people that have rated this product. */
    nrOfRatings?: number;

    [key: string]: any;
}

export type ProductCategory = "electronics" | "clothing" | "home decor" | "beauty" | "sports";

export type NewProductCategory = "electronics" | "clothing" | "home decor" | "beauty" | "sports";

export type UpdateProductCategory = "electronics" | "clothing" | "home decor" | "beauty" | "sports";

export type User2Role = "admin" | "productAdmin" | "warehouseAdmin";

export type ResultsCategory = "electronics" | "clothing" | "home decor" | "beauty" | "sports";

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}